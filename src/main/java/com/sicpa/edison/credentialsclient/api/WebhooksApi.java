/*
 * Edison Credentials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sicpa.edison.credentialsclient.api;

import com.sicpa.edison.credentialsclient.client.ApiCallback;
import com.sicpa.edison.credentialsclient.client.ApiClient;
import com.sicpa.edison.credentialsclient.client.ApiException;
import com.sicpa.edison.credentialsclient.client.ApiResponse;
import com.sicpa.edison.credentialsclient.client.Configuration;
import com.sicpa.edison.credentialsclient.client.Pair;
import com.sicpa.edison.credentialsclient.client.ProgressRequestBody;
import com.sicpa.edison.credentialsclient.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sicpa.edison.credentialsclient.model.ApiError;
import com.sicpa.edison.credentialsclient.model.Webhook;
import com.sicpa.edison.credentialsclient.model.WebhookCreate;
import com.sicpa.edison.credentialsclient.model.WebhookType;
import com.sicpa.edison.credentialsclient.model.WebhookUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhooksApi {
    private ApiClient localVarApiClient;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for webhookPost
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookPostCall(Integer X_ORGANIZATION_ID, WebhookCreate webhookCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = webhookCreate;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookPostValidateBeforeCall(Integer X_ORGANIZATION_ID, WebhookCreate webhookCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling webhookPost(Async)");
        }
        
        // verify the required parameter 'webhookCreate' is set
        if (webhookCreate == null) {
            throw new ApiException("Missing the required parameter 'webhookCreate' when calling webhookPost(Async)");
        }
        

        okhttp3.Call localVarCall = webhookPostCall(X_ORGANIZATION_ID, webhookCreate, _callback);
        return localVarCall;

    }

    /**
     * Create a new webhook
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookCreate  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Webhook webhookPost(Integer X_ORGANIZATION_ID, WebhookCreate webhookCreate) throws ApiException {
        ApiResponse<Webhook> localVarResp = webhookPostWithHttpInfo(X_ORGANIZATION_ID, webhookCreate);
        return localVarResp.getData();
    }

    /**
     * Create a new webhook
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookCreate  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> webhookPostWithHttpInfo(Integer X_ORGANIZATION_ID, WebhookCreate webhookCreate) throws ApiException {
        okhttp3.Call localVarCall = webhookPostValidateBeforeCall(X_ORGANIZATION_ID, webhookCreate, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new webhook (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookPostAsync(Integer X_ORGANIZATION_ID, WebhookCreate webhookCreate, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookPostValidateBeforeCall(X_ORGANIZATION_ID, webhookCreate, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookTypesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookTypesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookTypesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = webhookTypesGetCall(_callback);
        return localVarCall;

    }

    /**
     * List all webhook types and their respective filters
     * 
     * @return List&lt;WebhookType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<WebhookType> webhookTypesGet() throws ApiException {
        ApiResponse<List<WebhookType>> localVarResp = webhookTypesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all webhook types and their respective filters
     * 
     * @return ApiResponse&lt;List&lt;WebhookType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WebhookType>> webhookTypesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = webhookTypesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<WebhookType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all webhook types and their respective filters (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookTypesGetAsync(final ApiCallback<List<WebhookType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookTypesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<WebhookType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookWebhookIdDelete
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId A webhook ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookWebhookIdDeleteCall(Integer X_ORGANIZATION_ID, Integer webhookId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}"
            .replaceAll("\\{" + "webhookId" + "\\}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookWebhookIdDeleteValidateBeforeCall(Integer X_ORGANIZATION_ID, Integer webhookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling webhookWebhookIdDelete(Async)");
        }
        
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling webhookWebhookIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = webhookWebhookIdDeleteCall(X_ORGANIZATION_ID, webhookId, _callback);
        return localVarCall;

    }

    /**
     * Delete webhook
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId A webhook ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void webhookWebhookIdDelete(Integer X_ORGANIZATION_ID, Integer webhookId) throws ApiException {
        webhookWebhookIdDeleteWithHttpInfo(X_ORGANIZATION_ID, webhookId);
    }

    /**
     * Delete webhook
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId A webhook ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webhookWebhookIdDeleteWithHttpInfo(Integer X_ORGANIZATION_ID, Integer webhookId) throws ApiException {
        okhttp3.Call localVarCall = webhookWebhookIdDeleteValidateBeforeCall(X_ORGANIZATION_ID, webhookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete webhook (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId A webhook ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookWebhookIdDeleteAsync(Integer X_ORGANIZATION_ID, Integer webhookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookWebhookIdDeleteValidateBeforeCall(X_ORGANIZATION_ID, webhookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookWebhookIdGet
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId An webhook ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookWebhookIdGetCall(Integer X_ORGANIZATION_ID, Integer webhookId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}"
            .replaceAll("\\{" + "webhookId" + "\\}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookWebhookIdGetValidateBeforeCall(Integer X_ORGANIZATION_ID, Integer webhookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling webhookWebhookIdGet(Async)");
        }
        
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling webhookWebhookIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = webhookWebhookIdGetCall(X_ORGANIZATION_ID, webhookId, _callback);
        return localVarCall;

    }

    /**
     * Get webhook
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId An webhook ID. (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Webhook webhookWebhookIdGet(Integer X_ORGANIZATION_ID, Integer webhookId) throws ApiException {
        ApiResponse<Webhook> localVarResp = webhookWebhookIdGetWithHttpInfo(X_ORGANIZATION_ID, webhookId);
        return localVarResp.getData();
    }

    /**
     * Get webhook
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId An webhook ID. (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> webhookWebhookIdGetWithHttpInfo(Integer X_ORGANIZATION_ID, Integer webhookId) throws ApiException {
        okhttp3.Call localVarCall = webhookWebhookIdGetValidateBeforeCall(X_ORGANIZATION_ID, webhookId, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webhook (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId An webhook ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookWebhookIdGetAsync(Integer X_ORGANIZATION_ID, Integer webhookId, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookWebhookIdGetValidateBeforeCall(X_ORGANIZATION_ID, webhookId, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookWebhookIdPut
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId An webhook ID. (required)
     * @param webhookUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookWebhookIdPutCall(Integer X_ORGANIZATION_ID, Integer webhookId, WebhookUpdate webhookUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = webhookUpdate;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}"
            .replaceAll("\\{" + "webhookId" + "\\}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookWebhookIdPutValidateBeforeCall(Integer X_ORGANIZATION_ID, Integer webhookId, WebhookUpdate webhookUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling webhookWebhookIdPut(Async)");
        }
        
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling webhookWebhookIdPut(Async)");
        }
        
        // verify the required parameter 'webhookUpdate' is set
        if (webhookUpdate == null) {
            throw new ApiException("Missing the required parameter 'webhookUpdate' when calling webhookWebhookIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = webhookWebhookIdPutCall(X_ORGANIZATION_ID, webhookId, webhookUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update a webhook
     * The update is done in such manner that all fields passed in the payload updates the existing entity. Null valuesin the payload will indicate that no changes will be applied to the existing entity.
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId An webhook ID. (required)
     * @param webhookUpdate  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Webhook webhookWebhookIdPut(Integer X_ORGANIZATION_ID, Integer webhookId, WebhookUpdate webhookUpdate) throws ApiException {
        ApiResponse<Webhook> localVarResp = webhookWebhookIdPutWithHttpInfo(X_ORGANIZATION_ID, webhookId, webhookUpdate);
        return localVarResp.getData();
    }

    /**
     * Update a webhook
     * The update is done in such manner that all fields passed in the payload updates the existing entity. Null valuesin the payload will indicate that no changes will be applied to the existing entity.
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId An webhook ID. (required)
     * @param webhookUpdate  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> webhookWebhookIdPutWithHttpInfo(Integer X_ORGANIZATION_ID, Integer webhookId, WebhookUpdate webhookUpdate) throws ApiException {
        okhttp3.Call localVarCall = webhookWebhookIdPutValidateBeforeCall(X_ORGANIZATION_ID, webhookId, webhookUpdate, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a webhook (asynchronously)
     * The update is done in such manner that all fields passed in the payload updates the existing entity. Null valuesin the payload will indicate that no changes will be applied to the existing entity.
     * @param X_ORGANIZATION_ID  (required)
     * @param webhookId An webhook ID. (required)
     * @param webhookUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookWebhookIdPutAsync(Integer X_ORGANIZATION_ID, Integer webhookId, WebhookUpdate webhookUpdate, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookWebhookIdPutValidateBeforeCall(X_ORGANIZATION_ID, webhookId, webhookUpdate, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksGet
     * @param X_ORGANIZATION_ID  (required)
     * @param active Filter active webhooks (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksGetCall(Integer X_ORGANIZATION_ID, Boolean active, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksGetValidateBeforeCall(Integer X_ORGANIZATION_ID, Boolean active, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling webhooksGet(Async)");
        }
        

        okhttp3.Call localVarCall = webhooksGetCall(X_ORGANIZATION_ID, active, _callback);
        return localVarCall;

    }

    /**
     * List all webhooks
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param active Filter active webhooks (optional)
     * @return List&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Webhook> webhooksGet(Integer X_ORGANIZATION_ID, Boolean active) throws ApiException {
        ApiResponse<List<Webhook>> localVarResp = webhooksGetWithHttpInfo(X_ORGANIZATION_ID, active);
        return localVarResp.getData();
    }

    /**
     * List all webhooks
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param active Filter active webhooks (optional)
     * @return ApiResponse&lt;List&lt;Webhook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Webhook>> webhooksGetWithHttpInfo(Integer X_ORGANIZATION_ID, Boolean active) throws ApiException {
        okhttp3.Call localVarCall = webhooksGetValidateBeforeCall(X_ORGANIZATION_ID, active, null);
        Type localVarReturnType = new TypeToken<List<Webhook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all webhooks (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param active Filter active webhooks (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksGetAsync(Integer X_ORGANIZATION_ID, Boolean active, final ApiCallback<List<Webhook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksGetValidateBeforeCall(X_ORGANIZATION_ID, active, _callback);
        Type localVarReturnType = new TypeToken<List<Webhook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
