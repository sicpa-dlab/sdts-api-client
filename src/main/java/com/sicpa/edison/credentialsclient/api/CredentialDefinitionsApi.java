/*
 * Edison Credentials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sicpa.edison.credentialsclient.api;

import com.sicpa.edison.credentialsclient.client.ApiCallback;
import com.sicpa.edison.credentialsclient.client.ApiClient;
import com.sicpa.edison.credentialsclient.client.ApiException;
import com.sicpa.edison.credentialsclient.client.ApiResponse;
import com.sicpa.edison.credentialsclient.client.Configuration;
import com.sicpa.edison.credentialsclient.client.Pair;
import com.sicpa.edison.credentialsclient.client.ProgressRequestBody;
import com.sicpa.edison.credentialsclient.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sicpa.edison.credentialsclient.model.ApiError;
import com.sicpa.edison.credentialsclient.model.CredentialDefinition;
import com.sicpa.edison.credentialsclient.model.CredentialDefinitionCreate;
import com.sicpa.edison.credentialsclient.model.CredentialDefinitionSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CredentialDefinitionsApi {
    private ApiClient localVarApiClient;

    public CredentialDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CredentialDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clientClientIdGet1
     * @param X_ORGANIZATION_ID  (required)
     * @param credentialDefinitionId A credentialDefinition ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdGet1Call(Integer X_ORGANIZATION_ID, String credentialDefinitionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential-definitions/{credentialDefinitionId}"
            .replaceAll("\\{" + "credentialDefinitionId" + "\\}", localVarApiClient.escapeString(credentialDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientIdGet1ValidateBeforeCall(Integer X_ORGANIZATION_ID, String credentialDefinitionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling clientClientIdGet1(Async)");
        }
        
        // verify the required parameter 'credentialDefinitionId' is set
        if (credentialDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'credentialDefinitionId' when calling clientClientIdGet1(Async)");
        }
        

        okhttp3.Call localVarCall = clientClientIdGet1Call(X_ORGANIZATION_ID, credentialDefinitionId, _callback);
        return localVarCall;

    }

    /**
     * Get credentialDefinition
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param credentialDefinitionId A credentialDefinition ID. (required)
     * @return CredentialDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CredentialDefinition clientClientIdGet1(Integer X_ORGANIZATION_ID, String credentialDefinitionId) throws ApiException {
        ApiResponse<CredentialDefinition> localVarResp = clientClientIdGet1WithHttpInfo(X_ORGANIZATION_ID, credentialDefinitionId);
        return localVarResp.getData();
    }

    /**
     * Get credentialDefinition
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param credentialDefinitionId A credentialDefinition ID. (required)
     * @return ApiResponse&lt;CredentialDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredentialDefinition> clientClientIdGet1WithHttpInfo(Integer X_ORGANIZATION_ID, String credentialDefinitionId) throws ApiException {
        okhttp3.Call localVarCall = clientClientIdGet1ValidateBeforeCall(X_ORGANIZATION_ID, credentialDefinitionId, null);
        Type localVarReturnType = new TypeToken<CredentialDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get credentialDefinition (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param credentialDefinitionId A credentialDefinition ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdGet1Async(Integer X_ORGANIZATION_ID, String credentialDefinitionId, final ApiCallback<CredentialDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientIdGet1ValidateBeforeCall(X_ORGANIZATION_ID, credentialDefinitionId, _callback);
        Type localVarReturnType = new TypeToken<CredentialDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for credentialDefinitionPost
     * @param X_ORGANIZATION_ID  (required)
     * @param credentialDefinitionCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call credentialDefinitionPostCall(Integer X_ORGANIZATION_ID, CredentialDefinitionCreate credentialDefinitionCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = credentialDefinitionCreate;

        // create path and map variables
        String localVarPath = "/credential-definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call credentialDefinitionPostValidateBeforeCall(Integer X_ORGANIZATION_ID, CredentialDefinitionCreate credentialDefinitionCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling credentialDefinitionPost(Async)");
        }
        
        // verify the required parameter 'credentialDefinitionCreate' is set
        if (credentialDefinitionCreate == null) {
            throw new ApiException("Missing the required parameter 'credentialDefinitionCreate' when calling credentialDefinitionPost(Async)");
        }
        

        okhttp3.Call localVarCall = credentialDefinitionPostCall(X_ORGANIZATION_ID, credentialDefinitionCreate, _callback);
        return localVarCall;

    }

    /**
     * Create a new credentialDefinition
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param credentialDefinitionCreate  (required)
     * @return CredentialDefinitionSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CredentialDefinitionSummary credentialDefinitionPost(Integer X_ORGANIZATION_ID, CredentialDefinitionCreate credentialDefinitionCreate) throws ApiException {
        ApiResponse<CredentialDefinitionSummary> localVarResp = credentialDefinitionPostWithHttpInfo(X_ORGANIZATION_ID, credentialDefinitionCreate);
        return localVarResp.getData();
    }

    /**
     * Create a new credentialDefinition
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param credentialDefinitionCreate  (required)
     * @return ApiResponse&lt;CredentialDefinitionSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredentialDefinitionSummary> credentialDefinitionPostWithHttpInfo(Integer X_ORGANIZATION_ID, CredentialDefinitionCreate credentialDefinitionCreate) throws ApiException {
        okhttp3.Call localVarCall = credentialDefinitionPostValidateBeforeCall(X_ORGANIZATION_ID, credentialDefinitionCreate, null);
        Type localVarReturnType = new TypeToken<CredentialDefinitionSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new credentialDefinition (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param credentialDefinitionCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call credentialDefinitionPostAsync(Integer X_ORGANIZATION_ID, CredentialDefinitionCreate credentialDefinitionCreate, final ApiCallback<CredentialDefinitionSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = credentialDefinitionPostValidateBeforeCall(X_ORGANIZATION_ID, credentialDefinitionCreate, _callback);
        Type localVarReturnType = new TypeToken<CredentialDefinitionSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for credentialDefinitionsCreatedGet
     * @param X_ORGANIZATION_ID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call credentialDefinitionsCreatedGetCall(Integer X_ORGANIZATION_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential-definitions/created";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call credentialDefinitionsCreatedGetValidateBeforeCall(Integer X_ORGANIZATION_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling credentialDefinitionsCreatedGet(Async)");
        }
        

        okhttp3.Call localVarCall = credentialDefinitionsCreatedGetCall(X_ORGANIZATION_ID, _callback);
        return localVarCall;

    }

    /**
     * Get created credential definitions
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @return List&lt;CredentialDefinitionSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<CredentialDefinitionSummary> credentialDefinitionsCreatedGet(Integer X_ORGANIZATION_ID) throws ApiException {
        ApiResponse<List<CredentialDefinitionSummary>> localVarResp = credentialDefinitionsCreatedGetWithHttpInfo(X_ORGANIZATION_ID);
        return localVarResp.getData();
    }

    /**
     * Get created credential definitions
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @return ApiResponse&lt;List&lt;CredentialDefinitionSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CredentialDefinitionSummary>> credentialDefinitionsCreatedGetWithHttpInfo(Integer X_ORGANIZATION_ID) throws ApiException {
        okhttp3.Call localVarCall = credentialDefinitionsCreatedGetValidateBeforeCall(X_ORGANIZATION_ID, null);
        Type localVarReturnType = new TypeToken<List<CredentialDefinitionSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get created credential definitions (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call credentialDefinitionsCreatedGetAsync(Integer X_ORGANIZATION_ID, final ApiCallback<List<CredentialDefinitionSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = credentialDefinitionsCreatedGetValidateBeforeCall(X_ORGANIZATION_ID, _callback);
        Type localVarReturnType = new TypeToken<List<CredentialDefinitionSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
