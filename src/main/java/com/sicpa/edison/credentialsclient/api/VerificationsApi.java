/*
 * Edison Credentials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sicpa.edison.credentialsclient.api;

import com.sicpa.edison.credentialsclient.client.ApiCallback;
import com.sicpa.edison.credentialsclient.client.ApiClient;
import com.sicpa.edison.credentialsclient.client.ApiException;
import com.sicpa.edison.credentialsclient.client.ApiResponse;
import com.sicpa.edison.credentialsclient.client.Configuration;
import com.sicpa.edison.credentialsclient.client.Pair;
import com.sicpa.edison.credentialsclient.client.ProgressRequestBody;
import com.sicpa.edison.credentialsclient.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sicpa.edison.credentialsclient.model.ApiError;
import com.sicpa.edison.credentialsclient.model.Verification;
import com.sicpa.edison.credentialsclient.model.VerificationParam;
import com.sicpa.edison.credentialsclient.model.VerificationSummary;
import com.sicpa.edison.credentialsclient.model.VerificationTemplate;
import com.sicpa.edison.credentialsclient.model.VerificationTemplateParam;
import com.sicpa.edison.credentialsclient.model.VerificationTemplateSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerificationsApi {
    private ApiClient localVarApiClient;

    public VerificationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerificationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for verificationDelete
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationId A verification ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationDeleteCall(Integer X_ORGANIZATION_ID, String verificationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verifications/{verificationId}"
            .replaceAll("\\{" + "verificationId" + "\\}", localVarApiClient.escapeString(verificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificationDeleteValidateBeforeCall(Integer X_ORGANIZATION_ID, String verificationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling verificationDelete(Async)");
        }
        
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling verificationDelete(Async)");
        }
        

        okhttp3.Call localVarCall = verificationDeleteCall(X_ORGANIZATION_ID, verificationId, _callback);
        return localVarCall;

    }

    /**
     * Delete verification
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationId A verification ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void verificationDelete(Integer X_ORGANIZATION_ID, String verificationId) throws ApiException {
        verificationDeleteWithHttpInfo(X_ORGANIZATION_ID, verificationId);
    }

    /**
     * Delete verification
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationId A verification ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> verificationDeleteWithHttpInfo(Integer X_ORGANIZATION_ID, String verificationId) throws ApiException {
        okhttp3.Call localVarCall = verificationDeleteValidateBeforeCall(X_ORGANIZATION_ID, verificationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete verification (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationId A verification ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationDeleteAsync(Integer X_ORGANIZATION_ID, String verificationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificationDeleteValidateBeforeCall(X_ORGANIZATION_ID, verificationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for verificationGet
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationId A verification ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationGetCall(Integer X_ORGANIZATION_ID, String verificationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verifications/{verificationId}"
            .replaceAll("\\{" + "verificationId" + "\\}", localVarApiClient.escapeString(verificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificationGetValidateBeforeCall(Integer X_ORGANIZATION_ID, String verificationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling verificationGet(Async)");
        }
        
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling verificationGet(Async)");
        }
        

        okhttp3.Call localVarCall = verificationGetCall(X_ORGANIZATION_ID, verificationId, _callback);
        return localVarCall;

    }

    /**
     * Get verification
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationId A verification ID. (required)
     * @return Verification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Verification verificationGet(Integer X_ORGANIZATION_ID, String verificationId) throws ApiException {
        ApiResponse<Verification> localVarResp = verificationGetWithHttpInfo(X_ORGANIZATION_ID, verificationId);
        return localVarResp.getData();
    }

    /**
     * Get verification
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationId A verification ID. (required)
     * @return ApiResponse&lt;Verification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Verification> verificationGetWithHttpInfo(Integer X_ORGANIZATION_ID, String verificationId) throws ApiException {
        okhttp3.Call localVarCall = verificationGetValidateBeforeCall(X_ORGANIZATION_ID, verificationId, null);
        Type localVarReturnType = new TypeToken<Verification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get verification (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationId A verification ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationGetAsync(Integer X_ORGANIZATION_ID, String verificationId, final ApiCallback<Verification> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificationGetValidateBeforeCall(X_ORGANIZATION_ID, verificationId, _callback);
        Type localVarReturnType = new TypeToken<Verification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verificationTemplateDelete
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationTemplateDeleteCall(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verificationTemplates/{verificationTemplateId}"
            .replaceAll("\\{" + "verificationTemplateId" + "\\}", localVarApiClient.escapeString(verificationTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificationTemplateDeleteValidateBeforeCall(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling verificationTemplateDelete(Async)");
        }
        
        // verify the required parameter 'verificationTemplateId' is set
        if (verificationTemplateId == null) {
            throw new ApiException("Missing the required parameter 'verificationTemplateId' when calling verificationTemplateDelete(Async)");
        }
        

        okhttp3.Call localVarCall = verificationTemplateDeleteCall(X_ORGANIZATION_ID, verificationTemplateId, _callback);
        return localVarCall;

    }

    /**
     * Delete verification request
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void verificationTemplateDelete(Integer X_ORGANIZATION_ID, Integer verificationTemplateId) throws ApiException {
        verificationTemplateDeleteWithHttpInfo(X_ORGANIZATION_ID, verificationTemplateId);
    }

    /**
     * Delete verification request
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> verificationTemplateDeleteWithHttpInfo(Integer X_ORGANIZATION_ID, Integer verificationTemplateId) throws ApiException {
        okhttp3.Call localVarCall = verificationTemplateDeleteValidateBeforeCall(X_ORGANIZATION_ID, verificationTemplateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete verification request (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationTemplateDeleteAsync(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificationTemplateDeleteValidateBeforeCall(X_ORGANIZATION_ID, verificationTemplateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for verificationTemplateGet
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationTemplateGetCall(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verificationTemplates/{verificationTemplateId}"
            .replaceAll("\\{" + "verificationTemplateId" + "\\}", localVarApiClient.escapeString(verificationTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificationTemplateGetValidateBeforeCall(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling verificationTemplateGet(Async)");
        }
        
        // verify the required parameter 'verificationTemplateId' is set
        if (verificationTemplateId == null) {
            throw new ApiException("Missing the required parameter 'verificationTemplateId' when calling verificationTemplateGet(Async)");
        }
        

        okhttp3.Call localVarCall = verificationTemplateGetCall(X_ORGANIZATION_ID, verificationTemplateId, _callback);
        return localVarCall;

    }

    /**
     * Get verification template
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @return VerificationTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public VerificationTemplate verificationTemplateGet(Integer X_ORGANIZATION_ID, Integer verificationTemplateId) throws ApiException {
        ApiResponse<VerificationTemplate> localVarResp = verificationTemplateGetWithHttpInfo(X_ORGANIZATION_ID, verificationTemplateId);
        return localVarResp.getData();
    }

    /**
     * Get verification template
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @return ApiResponse&lt;VerificationTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationTemplate> verificationTemplateGetWithHttpInfo(Integer X_ORGANIZATION_ID, Integer verificationTemplateId) throws ApiException {
        okhttp3.Call localVarCall = verificationTemplateGetValidateBeforeCall(X_ORGANIZATION_ID, verificationTemplateId, null);
        Type localVarReturnType = new TypeToken<VerificationTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get verification template (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationTemplateGetAsync(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, final ApiCallback<VerificationTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificationTemplateGetValidateBeforeCall(X_ORGANIZATION_ID, verificationTemplateId, _callback);
        Type localVarReturnType = new TypeToken<VerificationTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verificationTemplatePut
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @param verificationTemplateParam  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationTemplatePutCall(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, VerificationTemplateParam verificationTemplateParam, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = verificationTemplateParam;

        // create path and map variables
        String localVarPath = "/verificationTemplates/{verificationTemplateId}"
            .replaceAll("\\{" + "verificationTemplateId" + "\\}", localVarApiClient.escapeString(verificationTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificationTemplatePutValidateBeforeCall(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, VerificationTemplateParam verificationTemplateParam, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling verificationTemplatePut(Async)");
        }
        
        // verify the required parameter 'verificationTemplateId' is set
        if (verificationTemplateId == null) {
            throw new ApiException("Missing the required parameter 'verificationTemplateId' when calling verificationTemplatePut(Async)");
        }
        
        // verify the required parameter 'verificationTemplateParam' is set
        if (verificationTemplateParam == null) {
            throw new ApiException("Missing the required parameter 'verificationTemplateParam' when calling verificationTemplatePut(Async)");
        }
        

        okhttp3.Call localVarCall = verificationTemplatePutCall(X_ORGANIZATION_ID, verificationTemplateId, verificationTemplateParam, _callback);
        return localVarCall;

    }

    /**
     * Update verification template
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @param verificationTemplateParam  (required)
     * @return VerificationTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public VerificationTemplate verificationTemplatePut(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, VerificationTemplateParam verificationTemplateParam) throws ApiException {
        ApiResponse<VerificationTemplate> localVarResp = verificationTemplatePutWithHttpInfo(X_ORGANIZATION_ID, verificationTemplateId, verificationTemplateParam);
        return localVarResp.getData();
    }

    /**
     * Update verification template
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @param verificationTemplateParam  (required)
     * @return ApiResponse&lt;VerificationTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationTemplate> verificationTemplatePutWithHttpInfo(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, VerificationTemplateParam verificationTemplateParam) throws ApiException {
        okhttp3.Call localVarCall = verificationTemplatePutValidateBeforeCall(X_ORGANIZATION_ID, verificationTemplateId, verificationTemplateParam, null);
        Type localVarReturnType = new TypeToken<VerificationTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update verification template (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateId A verification template ID. (required)
     * @param verificationTemplateParam  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationTemplatePutAsync(Integer X_ORGANIZATION_ID, Integer verificationTemplateId, VerificationTemplateParam verificationTemplateParam, final ApiCallback<VerificationTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificationTemplatePutValidateBeforeCall(X_ORGANIZATION_ID, verificationTemplateId, verificationTemplateParam, _callback);
        Type localVarReturnType = new TypeToken<VerificationTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verificationTemplatesGet
     * @param X_ORGANIZATION_ID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationTemplatesGetCall(Integer X_ORGANIZATION_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verificationTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificationTemplatesGetValidateBeforeCall(Integer X_ORGANIZATION_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling verificationTemplatesGet(Async)");
        }
        

        okhttp3.Call localVarCall = verificationTemplatesGetCall(X_ORGANIZATION_ID, _callback);
        return localVarCall;

    }

    /**
     * List all verification templates
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @return List&lt;VerificationTemplateSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<VerificationTemplateSummary> verificationTemplatesGet(Integer X_ORGANIZATION_ID) throws ApiException {
        ApiResponse<List<VerificationTemplateSummary>> localVarResp = verificationTemplatesGetWithHttpInfo(X_ORGANIZATION_ID);
        return localVarResp.getData();
    }

    /**
     * List all verification templates
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @return ApiResponse&lt;List&lt;VerificationTemplateSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VerificationTemplateSummary>> verificationTemplatesGetWithHttpInfo(Integer X_ORGANIZATION_ID) throws ApiException {
        okhttp3.Call localVarCall = verificationTemplatesGetValidateBeforeCall(X_ORGANIZATION_ID, null);
        Type localVarReturnType = new TypeToken<List<VerificationTemplateSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all verification templates (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationTemplatesGetAsync(Integer X_ORGANIZATION_ID, final ApiCallback<List<VerificationTemplateSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificationTemplatesGetValidateBeforeCall(X_ORGANIZATION_ID, _callback);
        Type localVarReturnType = new TypeToken<List<VerificationTemplateSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verificationTemplatesPost
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateParam  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationTemplatesPostCall(Integer X_ORGANIZATION_ID, VerificationTemplateParam verificationTemplateParam, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = verificationTemplateParam;

        // create path and map variables
        String localVarPath = "/verificationTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificationTemplatesPostValidateBeforeCall(Integer X_ORGANIZATION_ID, VerificationTemplateParam verificationTemplateParam, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling verificationTemplatesPost(Async)");
        }
        
        // verify the required parameter 'verificationTemplateParam' is set
        if (verificationTemplateParam == null) {
            throw new ApiException("Missing the required parameter 'verificationTemplateParam' when calling verificationTemplatesPost(Async)");
        }
        

        okhttp3.Call localVarCall = verificationTemplatesPostCall(X_ORGANIZATION_ID, verificationTemplateParam, _callback);
        return localVarCall;

    }

    /**
     * Create a new Verification Template
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateParam  (required)
     * @return VerificationTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public VerificationTemplate verificationTemplatesPost(Integer X_ORGANIZATION_ID, VerificationTemplateParam verificationTemplateParam) throws ApiException {
        ApiResponse<VerificationTemplate> localVarResp = verificationTemplatesPostWithHttpInfo(X_ORGANIZATION_ID, verificationTemplateParam);
        return localVarResp.getData();
    }

    /**
     * Create a new Verification Template
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateParam  (required)
     * @return ApiResponse&lt;VerificationTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationTemplate> verificationTemplatesPostWithHttpInfo(Integer X_ORGANIZATION_ID, VerificationTemplateParam verificationTemplateParam) throws ApiException {
        okhttp3.Call localVarCall = verificationTemplatesPostValidateBeforeCall(X_ORGANIZATION_ID, verificationTemplateParam, null);
        Type localVarReturnType = new TypeToken<VerificationTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Verification Template (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationTemplateParam  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationTemplatesPostAsync(Integer X_ORGANIZATION_ID, VerificationTemplateParam verificationTemplateParam, final ApiCallback<VerificationTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificationTemplatesPostValidateBeforeCall(X_ORGANIZATION_ID, verificationTemplateParam, _callback);
        Type localVarReturnType = new TypeToken<VerificationTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verificationsGet
     * @param X_ORGANIZATION_ID  (required)
     * @param state  (optional)
     * @param connectionId A connection ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationsGetCall(Integer X_ORGANIZATION_ID, String state, String connectionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (connectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connectionId", connectionId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificationsGetValidateBeforeCall(Integer X_ORGANIZATION_ID, String state, String connectionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling verificationsGet(Async)");
        }
        

        okhttp3.Call localVarCall = verificationsGetCall(X_ORGANIZATION_ID, state, connectionId, _callback);
        return localVarCall;

    }

    /**
     * List all verifications
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param state  (optional)
     * @param connectionId A connection ID. (optional)
     * @return List&lt;VerificationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<VerificationSummary> verificationsGet(Integer X_ORGANIZATION_ID, String state, String connectionId) throws ApiException {
        ApiResponse<List<VerificationSummary>> localVarResp = verificationsGetWithHttpInfo(X_ORGANIZATION_ID, state, connectionId);
        return localVarResp.getData();
    }

    /**
     * List all verifications
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param state  (optional)
     * @param connectionId A connection ID. (optional)
     * @return ApiResponse&lt;List&lt;VerificationSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VerificationSummary>> verificationsGetWithHttpInfo(Integer X_ORGANIZATION_ID, String state, String connectionId) throws ApiException {
        okhttp3.Call localVarCall = verificationsGetValidateBeforeCall(X_ORGANIZATION_ID, state, connectionId, null);
        Type localVarReturnType = new TypeToken<List<VerificationSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all verifications (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param state  (optional)
     * @param connectionId A connection ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationsGetAsync(Integer X_ORGANIZATION_ID, String state, String connectionId, final ApiCallback<List<VerificationSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificationsGetValidateBeforeCall(X_ORGANIZATION_ID, state, connectionId, _callback);
        Type localVarReturnType = new TypeToken<List<VerificationSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verificationsPost
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationParam  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationsPostCall(Integer X_ORGANIZATION_ID, VerificationParam verificationParam, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = verificationParam;

        // create path and map variables
        String localVarPath = "/verifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_ORGANIZATION_ID != null) {
            localVarHeaderParams.put("X-ORGANIZATION-ID", localVarApiClient.parameterToString(X_ORGANIZATION_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificationsPostValidateBeforeCall(Integer X_ORGANIZATION_ID, VerificationParam verificationParam, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_ORGANIZATION_ID' is set
        if (X_ORGANIZATION_ID == null) {
            throw new ApiException("Missing the required parameter 'X_ORGANIZATION_ID' when calling verificationsPost(Async)");
        }
        
        // verify the required parameter 'verificationParam' is set
        if (verificationParam == null) {
            throw new ApiException("Missing the required parameter 'verificationParam' when calling verificationsPost(Async)");
        }
        

        okhttp3.Call localVarCall = verificationsPostCall(X_ORGANIZATION_ID, verificationParam, _callback);
        return localVarCall;

    }

    /**
     * Create a new Verification
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationParam  (required)
     * @return Verification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Verification verificationsPost(Integer X_ORGANIZATION_ID, VerificationParam verificationParam) throws ApiException {
        ApiResponse<Verification> localVarResp = verificationsPostWithHttpInfo(X_ORGANIZATION_ID, verificationParam);
        return localVarResp.getData();
    }

    /**
     * Create a new Verification
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationParam  (required)
     * @return ApiResponse&lt;Verification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Verification> verificationsPostWithHttpInfo(Integer X_ORGANIZATION_ID, VerificationParam verificationParam) throws ApiException {
        okhttp3.Call localVarCall = verificationsPostValidateBeforeCall(X_ORGANIZATION_ID, verificationParam, null);
        Type localVarReturnType = new TypeToken<Verification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Verification (asynchronously)
     * 
     * @param X_ORGANIZATION_ID  (required)
     * @param verificationParam  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificationsPostAsync(Integer X_ORGANIZATION_ID, VerificationParam verificationParam, final ApiCallback<Verification> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificationsPostValidateBeforeCall(X_ORGANIZATION_ID, verificationParam, _callback);
        Type localVarReturnType = new TypeToken<Verification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
