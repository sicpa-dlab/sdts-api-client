openapi: 3.0.1
info:
  title: Sicpa Digital Trust Suite API
  version: 0.0.1
servers:
- url: /
tags:
- name: Schemas
  description: Create and retrieve schemas
- name: Definitions
  description: Create and retrieve credential definitions
- name: W3C Json-LD
  description: Sign credentials and returns the signed credential or an error msg.
- name: Wallet
  description: Operations related to the credentials held in the organization's wallet.
paths:
  /verification-templates/{verificationTemplateId}:
    get:
      tags:
      - Anoncreds templates
      summary: Get verification template
      operationId: getVerificationTemplateById
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: verificationTemplateId
        in: path
        description: A verification template ID.
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationTemplate'
      security:
      - auth: []
    put:
      tags:
      - Anoncreds templates
      summary: Update verification template
      operationId: updateVerificationTemplate
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: verificationTemplateId
        in: path
        description: A verification template ID.
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationTemplateUpdate'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationTemplate'
      security:
      - auth: []
    delete:
      tags:
      - Anoncreds templates
      summary: Delete a verification template
      operationId: deleteVerificationTemplate
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: verificationTemplateId
        in: path
        description: A verification template ID.
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "204":
          description: No Content
      security:
      - auth: []
  /organizations/{organizationId}:
    get:
      tags:
      - Organizations
      summary: Get an organization
      operationId: getOrganizationById
      parameters:
      - name: organizationId
        in: path
        description: An organization ID.
        required: true
        schema:
          type: integer
          format: int32
        example: 0
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - auth: []
    put:
      tags:
      - Organizations
      summary: Update an organization
      operationId: updateOrganization
      parameters:
      - name: organizationId
        in: path
        description: An organization ID.
        required: true
        schema:
          type: integer
          format: int32
        example: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpdate'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - auth: []
    delete:
      tags:
      - Organizations
      summary: Delete an organization
      operationId: deleteOrganization
      parameters:
      - name: organizationId
        in: path
        description: An organization ID.
        required: true
        schema:
          type: integer
          format: int32
        example: 0
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
      security:
      - auth: []
  /organizations/{organizationId}/image:
    get:
      tags:
      - Organizations Image
      summary: Get an organization's image
      operationId: getOrganizationImageById
      parameters:
      - name: organizationId
        in: path
        description: An organization ID.
        required: true
        schema:
          type: integer
          format: int32
        example: 0
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
      security:
      - auth: []
    put:
      tags:
      - Organizations Image
      summary: Update an organization image
      operationId: updateOrganizationImage
      parameters:
      - name: organizationId
        in: path
        description: An organization ID.
        required: true
        schema:
          type: integer
          format: int32
        example: 0
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  description: The image to upload. Only PNG and JPEG images are supported
                  format: binary
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "204":
          description: No Content
      security:
      - auth: []
    delete:
      tags:
      - Organizations Image
      summary: Delete an organization image
      operationId: deleteOrganizationImage
      parameters:
      - name: organizationId
        in: path
        description: An organization ID.
        required: true
        schema:
          type: integer
          format: int32
        example: 0
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "204":
          description: No Content
      security:
      - auth: []
  /verifications:
    get:
      tags:
      - Anoncreds
      summary: List all verification entries
      operationId: listVerifications
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: connectionId
        in: query
        description: A connection ID.
        required: false
        schema:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
        example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VerificationSummary'
      security:
      - auth: []
    post:
      tags:
      - Anoncreds
      summary: Create a new verification
      operationId: createVerification
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationCreate'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verification'
      security:
      - auth: []
  /verifications/w3c-verification:
    post:
      tags:
      - DIDComm
      summary: Initiate W3C Credential verification
      operationId: createVerificationV20
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationV20Request'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationV20Record'
      security:
      - auth: []
  /verification-templates:
    get:
      tags:
      - Anoncreds templates
      summary: List all verification templates
      operationId: listVerificationTemplates
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VerificationTemplateSummary'
      security:
      - auth: []
    post:
      tags:
      - Anoncreds templates
      summary: Create a new verification template
      operationId: createVerificationTemplate
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationTemplateCreate'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationTemplate'
      security:
      - auth: []
  /sign-credential:
    post:
      tags:
      - W3C Json-LD
      summary: Sign a w3c json-ld credential
      description: Sign a credential
      operationId: signCredential
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LDCredentialSigning'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedDocResponse'
      security:
      - auth: []
  /schemas:
    post:
      tags:
      - Schemas
      summary: Create a new schema
      description: "(ASYNC) create and anchor a new schema on the ledger. This is\
        \ an asynchronous operation, to follow anchoring progress, use webhooks or\
        \ check the schema's status from the API."
      operationId: createSchema
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaCreate'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaSummary'
      security:
      - auth: []
  /revocations/w3c-revocation:
    post:
      tags:
      - W3C Json-LD
      summary: Revoke a W3C json-ld credential using Status List v2021
      description: "This will manipulate the Status List Credential and set the credential\
        \ status under the index you have provided to #revoked#"
      operationId: revokeW3CCredential
      parameters:
      - name: X-CLIENT-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRevocationRequest'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "204":
          description: No Content
      security:
      - auth: []
  /revocations/anoncreds-revocation:
    post:
      tags:
      - Anoncreds
      summary: Revoke an AnonCreds credential
      operationId: revoke
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevocationCreate'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "204":
          description: No Content
      security:
      - auth: []
  /organizations:
    get:
      tags:
      - Organizations
      summary: List all organizations
      operationId: listOrganizations
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationSummary'
      security:
      - auth: []
    post:
      tags:
      - Organizations
      summary: Create a new organization and setup a new wallet
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreate'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - auth: []
  /organizations/{organizationId}/key-rotation:
    post:
      tags:
      - DIDs
      summary: Rotate keys of a DID and publish the new DID document
      operationId: rotateKeys
      parameters:
      - name: organizationId
        in: path
        description: An organization ID.
        required: true
        schema:
          type: integer
          format: int32
        example: 0
      - name: did
        in: query
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "202":
          description: Accepted
      security:
      - auth: []
  /organizations/{organizationId}/issuance-dids:
    get:
      tags:
      - DIDs
      summary: Retrieve public DIDs for a given organization.
      description: "Retrieve public DIDs along with their status regarding ledger\
        \ writes. DIDs in state READY_TO_WRITE are fully ready to operate on the ledger\
        \ (publish schemas, credential definitions, etc.)"
      operationId: listOrganizationDids
      parameters:
      - name: organizationId
        in: path
        description: An organization ID.
        required: true
        schema:
          type: integer
          format: int32
        example: 0
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssuanceDid'
      security:
      - auth: []
    post:
      tags:
      - DIDs
      summary: Create a new issuance DID for a given organization.
      description: "Create a new issuance DID. If it's a did:sov, get it endorsed\
        \ automatically."
      operationId: createIssuanceDid
      parameters:
      - name: organizationId
        in: path
        description: An organization ID.
        required: true
        schema:
          type: integer
          format: int32
        example: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DidCreationRequest'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceDid'
      security:
      - auth: []
  /organizations/{organizationId}/did-doc-publication:
    post:
      tags:
      - DIDs
      summary: Publish a new issuance DID doc for a given organization.
      operationId: publishDid
      parameters:
      - name: organizationId
        in: path
        description: An organization ID.
        required: true
        schema:
          type: integer
          format: int32
        example: 0
      - name: didPublicationRequest
        in: query
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
      security:
      - auth: []
  /openid4vc/w3c-jsonld-credentials-issuance:
    post:
      tags:
      - OpenID4VC
      summary: Request issuance of a w3c json-ld credential
      description: (ASYNC) Request the issuance of a w3c json-ld credential through
        OpenId4VC protocol.This operation is asynchronous.
      operationId: issueOpenIDCredential
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuanceOpenIdRequestPayload'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "202":
          description: Accepted
      security:
      - auth: []
  /openid4vc/credential_offer:
    post:
      tags:
      - OpenID4VC
      summary: Generate OpenID Credential Offer
      operationId: generateOpenIdCredentialOffer
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialOfferGenerationRequest'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uri'
      security:
      - auth: []
  /messages:
    post:
      tags:
      - DIDComm
      summary: Sends a message through a DIDComm established connection
      operationId: sendMessage
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "204":
          description: No Content
      security:
      - auth: []
  /didcomm/w3c-jsonld-credentials-issuance:
    post:
      tags:
      - DIDComm
      summary: Issue a W3C JSON-LD credential
      description: "(ASYNC) Issue a new W3C JSON-LD credential to an existing established\
        \ DIDComm connection. This operation is asynchronous, to follow the progress\
        \ of the issuance, use webhooks or check the issuance status using the API."
      operationId: issueW3cCredential
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuanceDidcommRequestPayload'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "202":
          description: Accepted
      security:
      - auth: []
  /didcomm/anoncreds-credentials-issuance:
    post:
      tags:
      - DIDComm
      summary: Issue an Anoncreds Credential
      description: "(ASYNC) Issue a new AnonCreds credential to an existing established\
        \ DIDComm connection. This operation is asynchronous, to follow the progress\
        \ of the issuance, use webhooks or check the issuance status using the API."
      operationId: issueCredential
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialCreate'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialIssuance'
      security:
      - auth: []
  /did-authentication:
    post:
      tags:
      - Smart Flow
      summary: Authenticate a DID
      description: |-
        (ASYNC) Requests a proof of control for keys associated with a DID.
        DID document is de-referenced from the DID.
        If the DID document lists DIDComm as an available service, engage in a DID Exchange protocol (Aries RFC 0023) using a key listed in the DID document.
        If the DID document lists a LinkedDomain service, try to resolve openid configuration files at the domain's well-known location. If found, engage in a SIOPv2 protocol where the identity token is expected to be signed
        with a key listed in the DID document.
        The protocol propagation is automatic.Webhook event type = DID_AUTHENTICATION
      operationId: authenticate
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DIDAuthenticationRequest'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "202":
          description: A DID authentication successfully started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DIDAuthenticationAcknowledgement'
        "404":
          description: A DID document or service could not be resolved from the DID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DIDAuthenticationAcknowledgement'
        "424":
          description: A DID document or OpenId configuration was invalid or could
            not be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DIDAuthenticationAcknowledgement'
      security:
      - auth: []
  /credential-definitions:
    post:
      tags:
      - Definitions
      summary: Create a new credential definition
      description: "(ASYNC) create and anchor a new schema on the ledger. This is\
        \ an asynchronous operation, to follow anchoring progress, use webhooks or\
        \ check the schema's status from the API."
      operationId: createCredentialDefinition
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialDefinitionCreate'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinitionSummary'
      security:
      - auth: []
  /connections:
    get:
      tags:
      - DIDComm
      summary: List connections
      description: List all DIDComm connection (Aries RFC 0160) records from the organization's
        wallet.
      operationId: listConnections
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: state
        in: query
        description: "Filter result by connection state. [invited, requested, responded,\
          \ complete]"
        required: false
        schema:
          type: string
          enum:
          - INIT
          - INVITATION
          - REQUEST
          - RESPONSE
          - ACTIVE
          - ERROR
          - INACTIVE
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'
      security:
      - auth: []
    post:
      tags:
      - DIDComm
      summary: Create a connection invitation
      description: Creates a new Connection invitation (Aries RFC 0160) to be consumed
        by external agents.
      operationId: createInvitation
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionInvitationCreate'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionInvitationCreationResult'
      security:
      - auth: []
  /connections/invitation:
    post:
      tags:
      - DIDComm
      summary: Receive and accept a new connection invitation
      description: "(ASYNC) Consume a connection invitation (Aries RFC 0160). The\
        \ protocol propagation is automatic \nWebhook event type = CONNECTION"
      operationId: receiveInvitation
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionInvitation'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
      security:
      - auth: []
  /w3c-credentials:
    get:
      tags:
      - Wallet
      summary: List W3C credentials
      description: Retrieves all W3C credentials from the organization's wallet.
      operationId: listW3cCredentials
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LDCredential'
      security:
      - auth: []
  /w3c-credentials/{credentialId}:
    get:
      tags:
      - Wallet
      summary: Retrieve a W3C credential
      description: Retrieves a specific W3C credential from the organization's wallet
        using the given credential ID.
      operationId: getW3cCredentialById
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: credentialId
        in: path
        description: A w3c credential ID.
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LDCredential'
      security:
      - auth: []
  /verifications/{verificationId}:
    get:
      tags:
      - Anoncreds
      summary: Get a verification entry
      operationId: getVerificationById
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: verificationId
        in: path
        description: A verification ID.
        required: true
        schema:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verification'
      security:
      - auth: []
    delete:
      tags:
      - Anoncreds
      summary: Delete a verification entry
      description: "Delete log entry for a verification, this does not cancel a verification."
      operationId: deleteVerificationEntry
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: verificationId
        in: path
        description: A verification ID.
        required: true
        schema:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "204":
          description: No Content
      security:
      - auth: []
  /verifications/w3c-verification/{verificationId}:
    get:
      tags:
      - DIDComm
      summary: Get a verification record with it's status
      operationId: getVerificationV20ById
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: verificationId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationV20Record'
      security:
      - auth: []
  /schemas/{schemaId}:
    get:
      tags:
      - Schemas
      summary: Get schema
      description: Retrieve a schema. Anchored flag can be used to ensure the schema
        is ready to use.
      operationId: getSchemaById
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: schemaId
        in: path
        description: A schema ID.
        required: true
        schema:
          pattern: "^[1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+$"
          type: string
        example: 0
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      security:
      - auth: []
  /schemas/created:
    get:
      tags:
      - Schemas
      summary: List created schemas
      operationId: listSchemas
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaSummary'
      security:
      - auth: []
  /credential-definitions/{credentialDefinitionId}:
    get:
      tags:
      - Definitions
      summary: Get a single credential definition
      operationId: getCredentialDefinitionById
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: credentialDefinitionId
        in: path
        description: A credentialDefinition ID.
        required: true
        schema:
          pattern: "[1-9A-HJ-NP-Za-km-z]{21,22}:3:CL:(([1-9][0-9]*)|([1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+)):.*$"
          type: string
        example: 0
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinition'
      security:
      - auth: []
  /credential-definitions/created:
    get:
      tags:
      - Definitions
      summary: List all created credential definitions
      operationId: listCredentialDefinitions
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CredentialDefinitionSummary'
      security:
      - auth: []
  /connections/{connectionId}:
    get:
      tags:
      - DIDComm
      summary: Retrieve a connection
      description: Retrieve a DIDComm connection record (Aries RFC 0160).  from the
        organization's wallet using the given connection ID
      operationId: getConnectionById
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: connectionId
        in: path
        description: Connection ID
        required: true
        schema:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
        example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
      security:
      - auth: []
    delete:
      tags:
      - DIDComm
      summary: Delete a connection
      description: Deletes a DIDComm connection (Aries RFC 0160) from the organization's
        wallet.
      operationId: deleteConnection
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: connectionId
        in: path
        description: Connection ID
        required: true
        schema:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
        example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
      security:
      - auth: []
  /anoncreds-credentials:
    get:
      tags:
      - Wallet
      summary: List anoncreds credentials
      description: Retrieves all anoncreds credentials from the organization's wallet.
      operationId: listCredentials
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credential'
      security:
      - auth: []
  /anoncreds-credentials/{credentialId}:
    get:
      tags:
      - Wallet
      summary: Retrieve an anoncreds credential
      description: Retrieves a single anoncreds credential from the organization's
        wallet using the provided credential ID.
      operationId: getCredentialById
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: credentialId
        in: path
        description: An anoncreds credential ID.
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
      security:
      - auth: []
    delete:
      tags:
      - Wallet
      summary: Delete an anoncreds credential
      description: Deletes an anoncreds credential from the organization's wallet
        using the provided credential ID.
      operationId: deleteCredential
      parameters:
      - name: X-ORGANIZATION-ID
        in: header
        required: true
        schema:
          type: integer
          format: int32
      - name: credentialId
        in: path
        description: An anoncreds credential ID.
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "204":
          description: No Content
      security:
      - auth: []
components:
  schemas:
    ApiError:
      required:
      - error
      - message
      - path
      - status
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string
    PredicateRestriction:
      required:
      - credentialDefinitionId
      type: object
      properties:
        credentialDefinitionId:
          type: string
          description: A credential definition ID
        schemaId:
          type: string
          description: A schema ID
      description: A list of predicate restrictions
    RequestedAttribute:
      required:
      - names
      - restrictions
      type: object
      properties:
        names:
          type: array
          description: List of attribute names
          items:
            type: string
            description: List of attribute names
        restrictions:
          type: array
          description: "The attribute restrictions. At least one restriction should\
            \ be valid in order for the verification to be successful. (Not considering\
            \ predicates, revocation requirements...)"
          items:
            $ref: '#/components/schemas/RequestedAttributeRestriction'
      description: "The requested attributes. In order for the verification to be\
        \ successful, all requested attribute should be validated"
    RequestedAttributeRestriction:
      required:
      - credentialDefinitionId
      type: object
      properties:
        credentialDefinitionId:
          type: string
          description: A credential definition ID
        schemaId:
          type: string
          description: A schema ID
        valueRestrictions:
          type: object
          additionalProperties:
            type: string
            description: Restrict attributes value
            example: "{\"firstname\":\"John\"}"
          description: Restrict attributes value
          example:
            firstname: John
      description: "The attribute restrictions. At least one restriction should be\
        \ valid in order for the verification to be successful. (Not considering predicates,\
        \ revocation requirements...)"
    RequestedPredicate:
      required:
      - name
      - predicateType
      - predicateValue
      - restrictions
      type: object
      properties:
        name:
          type: string
          description: A predicate name
        predicateType:
          type: string
          description: A predicate type
          enum:
          - LESS_THAN
          - LESS_THAN_OR_EQUAL_TO
          - GREATER_THAN_OR_EQUAL_TO
          - GREATER_THAN
        predicateValue:
          type: integer
          description: A predicate value
          format: int32
        restrictions:
          type: array
          description: A list of predicate restrictions
          items:
            $ref: '#/components/schemas/PredicateRestriction'
      description: "The requested predicates. In order for the verification to be\
        \ successful, all requested predicates should be validated"
    RevocationRequirement:
      type: object
      properties:
        validAt:
          type: string
          description: Date at which the credential should be valid
          format: date-time
        validNow:
          type: boolean
          description: Defines if the credential should be valid at the current date
    VerificationTemplateContent:
      required:
      - requestedAttributes
      - requestedPredicates
      type: object
      properties:
        requestedAttributes:
          type: array
          description: "The requested attributes. In order for the verification to\
            \ be successful, all requested attribute should be validated"
          items:
            $ref: '#/components/schemas/RequestedAttribute'
        requestedPredicates:
          type: array
          description: "The requested predicates. In order for the verification to\
            \ be successful, all requested predicates should be validated"
          items:
            $ref: '#/components/schemas/RequestedPredicate'
        revocationRequirement:
          $ref: '#/components/schemas/RevocationRequirement'
      description: The verification template content
    VerificationTemplateUpdate:
      type: object
      properties:
        name:
          type: string
          description: The verification template name
          example: example
        content:
          $ref: '#/components/schemas/VerificationTemplateContent'
    VerificationTemplate:
      required:
      - content
      - id
      - name
      - organizationId
      type: object
      properties:
        id:
          type: integer
          description: The verificationTemplate id
          format: int32
        name:
          type: string
          description: The verificationTemplate name
          example: example
        content:
          $ref: '#/components/schemas/VerificationTemplateContent'
        organizationId:
          type: integer
          description: The organization id
          format: int32
          example: 1
    OrganizationUpdate:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The organization name
        imageUrl:
          type: string
          description: The image url of the Organization
    IssuanceDid:
      required:
      - did
      - verificationKey
      type: object
      properties:
        did:
          type: string
        verificationKey:
          type: string
        endorsementStatus:
          type: string
      description: Public did if applicable
      nullable: true
    Organization:
      required:
      - clientId
      - id
      - issuanceDids
      - name
      type: object
      properties:
        id:
          type: integer
          description: The organization's id
          format: int32
        name:
          type: string
          description: The organization's label
        clientId:
          type: integer
          description: The organization's clientId
          format: int32
        imageUrl:
          type: string
          description: The image url of the Organization
        issuanceDids:
          type: array
          description: Public did if applicable
          nullable: true
          items:
            $ref: '#/components/schemas/IssuanceDid'
    VerificationCreate:
      required:
      - connectionId
      - verificationTemplateId
      type: object
      properties:
        verificationTemplateId:
          type: integer
          description: The verification template id
          format: int32
          example: 0
        connectionId:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
          description: DIDComm Connection ID
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        comment:
          type: string
          description: An optional comment
    Verification:
      required:
      - connectionId
      - createdAt
      - state
      - updatedAt
      - verificationId
      - verificationRequest
      type: object
      properties:
        verificationId:
          type: string
          description: The verification id
          example: ac32f24e-2f90-4e90-9427-c59482078a4b
        connectionId:
          type: string
          description: DIDComm Connection ID
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        verificationRequest:
          $ref: '#/components/schemas/VerificationRequest'
        state:
          type: string
          description: The verification state
          enum:
          - SUCCESS
          - PENDING
          - FAILURE
          - ERROR
        createdAt:
          type: string
          description: 'The creation date '
          format: date-time
        updatedAt:
          type: string
          description: The update date
          format: date-time
    VerificationRequest:
      required:
      - name
      - requestedAttributes
      - requestedPredicates
      type: object
      properties:
        name:
          type: string
          description: The verification request name
        requestedAttributes:
          type: array
          description: The requested attributes
          items:
            $ref: '#/components/schemas/RequestedAttribute'
        requestedPredicates:
          type: array
          description: The requested predicates
          items:
            $ref: '#/components/schemas/RequestedPredicate'
        validAt:
          type: string
          description: The date at which the credential should be valid
          format: date-time
      description: The verification request
    VerificationV20Options:
      required:
      - requiredClaims
      type: object
      properties:
        requiredClaims:
          type: array
          description: List of claims that the credential needs to contain
          items:
            type: string
            description: List of claims that the credential needs to contain
        requiredType:
          type: string
          description: List of possible credential types that the claims need to come
            from
          nullable: true
          default: VerifiableCredential
        checkExpired:
          type: boolean
          description: Flag to indicate if verification should fail when expiry date
            has passed
          nullable: true
          default: true
      description: Options defining verification checks that should be performed
    VerificationV20Request:
      required:
      - connectionId
      - verificationOptions
      type: object
      properties:
        connectionId:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
          description: The connection id
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        verificationOptions:
          $ref: '#/components/schemas/VerificationV20Options'
        comment:
          type: string
          description: An optional comment
          example: optional comment
    VerificationV20Record:
      required:
      - connectionId
      - createdAt
      - state
      - updatedAt
      - verificationId
      type: object
      properties:
        verificationId:
          type: string
          description: The verification id
          example: ac32f24e-2f90-4e90-9427-c59482078a4b
        connectionId:
          type: string
          description: DIDComm Connection ID
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        state:
          type: string
          description: The verification state
          enum:
          - SUCCESS
          - PENDING
          - FAILURE
          - ERROR
        createdAt:
          type: string
          description: 'The creation date '
          format: date-time
        updatedAt:
          type: string
          description: The update date
          format: date-time
        presentedCredentials:
          type: array
          description: Presented credentials
          items:
            type: object
            additionalProperties:
              type: object
              description: Presented credentials
            description: Presented credentials
    VerificationTemplateCreate:
      required:
      - content
      - name
      type: object
      properties:
        name:
          type: string
          description: The verificationTemplate name
        content:
          $ref: '#/components/schemas/VerificationTemplateContent'
    LDCredentialSigning:
      required:
      - credential
      - proofType
      - revocable
      type: object
      properties:
        credential:
          type: object
          description: Credential
        proofType:
          type: string
          description: Key type "ed25519" or "bls12381g2"
          enum:
          - ed25519
          - ed25519_2020
          - bls12381g2
        revocable:
          type: boolean
    SignedDocResponse:
      required:
      - signedDoc
      type: object
      properties:
        signedDoc:
          type: object
          description: Document signed
    SchemaCreate:
      required:
      - attributesName
      - name
      - version
      type: object
      properties:
        name:
          type: string
          description: Schema name
          example: prefs
        version:
          pattern: "^[0-9.]+$"
          type: string
          description: Schema version
          example: "1.0"
        attributesName:
          type: array
          description: List of schema attributes
          items:
            type: string
            description: List of schema attributes
    SchemaSummary:
      required:
      - id
      type: object
      properties:
        id:
          pattern: "^[1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+$"
          type: string
          description: The schema's id
        transactionId:
          type: string
          description: Id of the transaction containing the schema
        transactionStatus:
          type: string
          description: The transaction status regarding anchoring
    CredentialRevocationRequest:
      required:
      - statusListCredential
      - statusListIndex
      type: object
      properties:
        credentialId:
          type: string
          description: Credential identifier. It will be included in webhooks event
        statusListIndex:
          type: integer
          description: Bit index indicating the status of the verifiable credential
            in the corresponding status list
          format: int32
        statusListCredential:
          type: string
          description: URL of the status list credential
    RevocationCreate:
      required:
      - issuanceId
      type: object
      properties:
        issuanceId:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
          description: A credential issuance ID
    OrganizationCreate:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The organization name
        imageUrl:
          type: string
          description: The image url of the Organization
    DidCreationRequest:
      required:
      - keyType
      - method
      type: object
      properties:
        method:
          type: string
          description: The did method to use
        keyType:
          type: string
          description: The key type to use
          enum:
          - ed25519
          - bls12381g2
        did:
          type: string
          description: The did to use (if applicable)
    IssuanceOpenIdRequestPayload:
      required:
      - credential
      - issuerDid
      - openIdConnect
      - proofType
      - recipientDid
      - revocable
      type: object
      properties:
        issuerDid:
          type: string
          description: Issuer DID
        proofType:
          type: string
          description: Proof type used to sign and verify the credential
          enum:
          - ed25519
          - ed25519_2020
          - bls12381g2
        revocable:
          type: boolean
          description: Make the credential revocable
        recipientDid:
          type: string
          description: DID intended as the credential recipient
        openIdConnect:
          $ref: '#/components/schemas/OpenIdIssuanceParameters'
        credential:
          type: object
          description: Credential as a JSON object
    OpenIdIssuanceParameters:
      required:
      - wellKnownUrl
      type: object
      properties:
        wellKnownUrl:
          type: string
          description: Endpoint to which OIDC credential offers can be sent.
          format: url
      description: Parameters required for OpenId Connect issuance
    CredentialOfferGenerationRequest:
      required:
      - credential
      - issuerDid
      - revocable
      type: object
      properties:
        issuerDid:
          type: string
          description: Issuer DID
        recipientDid:
          type: string
          description: DID intended as the credential recipient
          nullable: true
        credential:
          type: object
          additionalProperties:
            type: object
            description: Credential as a JSON object
          description: Credential as a JSON object
        revocable:
          type: boolean
          description: Make the credential revocable
    Uri:
      type: object
      properties:
        credentialOfferUri:
          type: string
          format: uri
    Message:
      required:
      - connectionId
      - text
      type: object
      properties:
        text:
          type: string
          description: Message text
        connectionId:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
          description: DIDComm Connection ID
    DIDCommIssuanceParameters:
      required:
      - connectionId
      type: object
      properties:
        connectionId:
          type: string
          description: Connection through which to issue the credential
      description: Parameters required for DIDComm issuance
    IssuanceDidcommRequestPayload:
      required:
      - credential
      - didcomm
      - issuerDid
      - proofType
      - recipientDid
      - revocable
      type: object
      properties:
        issuerDid:
          type: string
          description: Issuer DID
        proofType:
          type: string
          description: Proof type used to sign and verify the credential
          enum:
          - ed25519
          - ed25519_2020
          - bls12381g2
        revocable:
          type: boolean
          description: Make the credential revocable
        recipientDid:
          type: string
          description: DID intended as the credential recipient
        didcomm:
          $ref: '#/components/schemas/DIDCommIssuanceParameters'
        credential:
          type: object
          description: Credential as a JSON object
    CredentialAttribute:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: A credential attribute name
        value:
          type: string
          description: A credential attribute value
        mimeType:
          type: string
          description: An optional credential mime type
      description: A list of credential attributes
    CredentialCreate:
      required:
      - attributes
      - connectionId
      - credentialDefinitionId
      - schemaId
      type: object
      properties:
        connectionId:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
          description: DIDComm Connection ID
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        schemaId:
          pattern: "^[1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+$"
          type: string
          description: A schema ID
        credentialDefinitionId:
          pattern: "[1-9A-HJ-NP-Za-km-z]{21,22}:3:CL:(([1-9][0-9]*)|([1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+)):.*$"
          type: string
          description: A credential definition ID
        comment:
          type: string
          description: A human readable comment
        attributes:
          type: array
          description: A list of credential attributes
          items:
            $ref: '#/components/schemas/CredentialAttribute'
    Credential:
      required:
      - credentialProposal
      type: object
      properties:
        credentialId:
          type: string
        schemaId:
          pattern: "^[1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+$"
          type: string
          description: A AnonCreds credential schema ID
        credentialDefinitionId:
          pattern: "[1-9A-HJ-NP-Za-km-z]{21,22}:3:CL:(([1-9][0-9]*)|([1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+)):.*$"
          type: string
          description: A AnonCreds credential definition ID
        comment:
          type: string
          description: A human readable comment
        credentialProposal:
          $ref: '#/components/schemas/CredentialProposal'
    CredentialIssuance:
      required:
      - credential
      - issuanceId
      - state
      type: object
      properties:
        issuanceId:
          type: string
          description: A credential issuance ID
        errorMessage:
          type: string
          description: Optional error message
        state:
          type: string
          description: State of the credential transaction
        updatedAt:
          type: string
          format: date-time
        credential:
          $ref: '#/components/schemas/Credential'
    CredentialProposal:
      required:
      - attributes
      type: object
      properties:
        attributes:
          type: array
          description: A list of credential attributes
          items:
            $ref: '#/components/schemas/CredentialAttribute'
    DIDAuthenticationRequest:
      required:
      - did
      type: object
      properties:
        did:
          pattern: "^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$$"
          type: string
          example: did:sov:29r83t9qhfQWJFMFASF
        usePublicDid:
          type: boolean
          nullable: true
          example: true
    DIDAuthenticationAcknowledgement:
      required:
      - did
      - method
      type: object
      properties:
        did:
          pattern: "^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$$"
          type: string
          example: did:sov:29r83t9qhfQWJFMFASF
        method:
          type: string
          enum:
          - DIDEXCHANGE
          - SIOPV2
    CredentialDefinitionCreate:
      required:
      - schemaId
      - supportRevocation
      - tag
      type: object
      properties:
        schemaId:
          pattern: "^[1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+$"
          type: string
          description: Schema identifier
          example: WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
        tag:
          type: string
          description: Credential definition identifier tag
          example: default
        supportRevocation:
          type: boolean
          description: Revocation supported flag
    CredentialDefinitionSummary:
      required:
      - id
      type: object
      properties:
        id:
          pattern: "[1-9A-HJ-NP-Za-km-z]{21,22}:3:CL:(([1-9][0-9]*)|([1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+)):.*$"
          type: string
          description: The credential definition's id
        transactionId:
          type: string
          description: Id of the transaction containing the schema
        transactionStatus:
          type: string
          description: The transaction status regarding anchoring
    ConnectionInvitationCreate:
      type: object
      properties:
        alias:
          type: string
          description: Connection alias
          example: Some alias
    ConnectionInvitationContent:
      required:
      - invitationId
      - recipientKeys
      - serviceEndpoint
      type: object
      properties:
        invitationId:
          type: string
          description: The connection's invitation id
        serviceEndpoint:
          type: string
          description: The connection's service endpoint
        recipientKeys:
          type: array
          description: The list of recipient's keys
          items:
            type: string
            description: The list of recipient's keys
        routingKeys:
          type: array
          description: The list of routing's keys
          items:
            type: string
            description: The list of routing's keys
        label:
          type: string
          description: The connection's label
        imgUrl:
          type: string
          description: The Agent image URL
    ConnectionInvitationCreationResult:
      required:
      - connectionId
      - connectionInvitationContent
      - invitationUrl
      type: object
      properties:
        invitationUrl:
          type: string
          description: Invitation URL
          example: http://192.168.56.101:8020/invite?c_i=eyJAdHlwZSI6Li4ufQ==
        connectionInvitationContent:
          $ref: '#/components/schemas/ConnectionInvitationContent'
        connectionId:
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
          description: DIDComm Connection ID
    ConnectionInvitation:
      required:
      - connectionInvitationContent
      type: object
      properties:
        connectionInvitationContent:
          $ref: '#/components/schemas/ConnectionInvitationContent'
        alias:
          type: string
    Connection:
      required:
      - connectionId
      - state
      type: object
      properties:
        label:
          type: string
          description: The connection's label
        connectionId:
          type: string
          description: DIDComm Connection ID
        state:
          type: string
          enum:
          - INIT
          - INVITATION
          - REQUEST
          - RESPONSE
          - ACTIVE
          - ERROR
          - INACTIVE
    LDCredential:
      required:
      - contexts
      - credential
      - issuer
      - proofType
      - subjectId
      type: object
      properties:
        contexts:
          type: array
          description: Credential context
          items:
            type: string
            description: Credential context
        credential:
          type: object
          description: Credential Values as a JSON object
        issuer:
          type: string
          description: Issuer did
        proofType:
          type: array
          items:
            type: string
        subjectId:
          type: array
          items:
            type: string
    VerificationSummary:
      required:
      - name
      - verificationId
      type: object
      properties:
        verificationId:
          type: string
          description: The verification id
          example: ac32f24e-2f90-4e90-9427-c59482078a4b
        name:
          type: string
          description: The name of the validation
          example: example
    VerificationTemplateSummary:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          description: The verification template id
          format: int32
          example: 0
        name:
          type: string
          description: The verification template name
          example: example
    Schema:
      required:
      - anchored
      - attributesName
      - id
      - name
      - version
      type: object
      properties:
        id:
          pattern: "^[1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+$"
          type: string
          description: The schema's id
        name:
          type: string
          description: The schema's name
        version:
          pattern: "^[0-9.]+$"
          type: string
          description: The schema's version
        attributesName:
          type: array
          description: The schema's attributes
          items:
            type: string
            description: The schema's attributes
        anchored:
          type: boolean
          description: Whether the schema is anchored or not
    OrganizationSummary:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          description: The organization id
          format: int32
        name:
          type: string
          description: The organization name
        imgUrl:
          type: string
          description: The image url of the Organization
    CredentialDefinition:
      required:
      - anchored
      - id
      type: object
      properties:
        id:
          pattern: "[1-9A-HJ-NP-Za-km-z]{21,22}:3:CL:(([1-9][0-9]*)|([1-9A-HJ-NP-Za-km-z]{21,22}:2:.+:[0-9.]+)):.*$"
          type: string
        anchored:
          type: boolean
          description: Whether the credential definition is anchored or not
  securitySchemes:
    auth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://signin.adaptivespace.io
          scopes: {}
